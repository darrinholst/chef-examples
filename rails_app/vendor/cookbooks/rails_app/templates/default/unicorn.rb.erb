rails_env = '<%= @environment %>'

# 4 workers and 1 master
worker_processes (rails_env == 'production' ? 4 : 2)

# Load the app into the master before forking workers for fast worker spawn times
preload_app true

# Restart any workers that haven't responded in 30 seconds
timeout 30

# Listen on a Unix data socket
listen '/var/www/<%= @name %>/current/tmp/sockets/unicorn.sock', :backlog => 2048

stderr_path "/var/log/www/<%= @name %>.stderr.log"
stdout_path "/var/log/www/<%= @name %>.stdout.log"

before_fork do |server, worker|
  old_pid = Rails.root + '/tmp/pids/unicorn.pid.oldbin'

  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end
end

after_fork do |server, worker|
  ActiveRecord::Base.establish_connection

  #
  # change process owner from root to app user
  #
  begin
    uid, gid = Process.euid, Process.egid
    user, group = '<%= @name %>', '<%= @name %>'
    target_uid = Etc.getpwnam(user).uid
    target_gid = Etc.getgrnam(group).gid
    worker.tmp.chown(target_uid, target_gid)
    if uid != target_uid || gid != target_gid
      Process.initgroups(user, target_gid)
      Process::GID.change_privilege(target_gid)
      Process::UID.change_privilege(target_uid)
    end
  rescue => e
    raise e unless Rails.env.development?
  end
end

